
method.return.main[groovy:it.returnType().isExtend("com.itangcent.common.dto.Result")]=data

# Support for Jackson annotation JsonView
json.cache.disable=true
api.param.parse.before=groovy:session.set("is-param",true)
api.param.parse.after=groovy:session.remove("is-param")

# Cache the JsonView information at the method level
api.method.parse.before=groovy:```
    def jsonViews = it.annValue("com.fasterxml.jackson.annotation.JsonView")
    //logger.info("method jsonViews:"+jsonViews)
    if (jsonViews) {
        session.set("json-views", jsonViews)
    }
```
api.method.parse.after=groovy:```
    session.remove("json-views")
```

# Check if a field should be ignored based on the active JsonView
field.ignore=groovy:```
    if(session.get("is-param")){
        return false
    }
    if(it.contextType()!="field"){
        return false
    }
    def jsonViews = session.get("json-views")
    //logger.info("field jsonViews:"+jsonViews)
    if (jsonViews) {
        def fieldViews = it.annValue("com.fasterxml.jackson.annotation.JsonView")
        if (fieldViews) {
            // Return true if none of the field's views are in the active JsonView
            return !fieldViews.any{ fieldView-> jsonViews.any{ jsonView-> jsonView.isExtend(fieldView.name) } }
        } else {
            // If the field has no JsonView annotation, it should be ignored
            return true
        }
    }
    return false
```
http.call.before=groovy:logger.info("call:"+request.url()+"\nbody:"+request.body())
yapi.noUpdateDescription=true

method.additional.header=groovy:```
  logger.info("it:"+it)
```
method.additional.header[groovy:it.containingClass().name().startsWith("xxxx.xxxx.xxxx.controller")]=groovy:```
  logger.info("it:"+it)
  for (arg in it.args()) {
      logger.info("arg:"+arg)
      logger.info("type:"+arg.type())
      logger.info("fields:"+arg.type().fields())
      for (field in arg.type().fields()) {
          def header = field.ann("xxxx.xxxx.xxxx.Header")
          logger.info("field: "+field+", annotated with: xxxx.xxxx.xxxx.Annotation, required:"+header)
          if (header!=null) {
              logger.info("Annotation found on:"+field)
              return tool.toJson([
                  name: header,
                  value: "{{xxx-xxx-xxx}}",
                  desc: "xxxx",
                  required: true,
                  example: ""
              ])
          }
      }
  }
```

export.after[#return]=groovy:```
    def returnClass = helper.resolveLink(it.doc("return"))
    if(returnClass == null){
        return
    }
    def returnObj = returnClass.toObject(true,true,true)
    api.setResponseBody([
        "@comment": [code: "状态码", data: "数据对象", msg: "返回内容"],
        code: 200,
        data: returnObj,
        msg: "success"
    ])
```
# 全局认证
method.additional.header={name: "Authorization",demo: "eyJhbGciOiJIUzUxMiJ9.....",desc: "认证Token",required:true}
param.required=@javax.validation.constraints.NotEmpty
yapi.no_update.description=true
json.cache.disable=true
api.param.parse.before=groovy:session.set("isParam",true)
api.param.parse.after=groovy:session.remove("isParam")
json.rule.field.ignore[com.baomidou.mybatisplus.extension.plugins.pagination.Page#records]=groovy:session.get("isParam")
